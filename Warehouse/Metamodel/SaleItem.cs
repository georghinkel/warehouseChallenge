//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Hsrm.DeepModeling.Warehouse.Warehouse
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using NMF.Expressions;
    using NMF.Expressions.Linq;
    using NMF.Models;
    using NMF.Models.Meta;
    using NMF.Models.Collections;
    using NMF.Models.Expressions;
    using NMF.Collections.Generic;
    using NMF.Collections.ObjectModel;
    using NMF.Serialization;
    using NMF.Utilities;
    using System.Collections.Specialized;
    using NMF.Models.Repository;
    
    
    /// <summary>
    /// The default implementation of the SaleItem class
    /// </summary>
    [XmlNamespaceAttribute("https://multi-workshop.github.io/warehouse/nmeta")]
    [XmlNamespacePrefixAttribute("warehouse")]
    [ModelRepresentationClassAttribute("https://multi-workshop.github.io/warehouse/nmeta#//SaleItem")]
    public abstract partial class SaleItem : NMF.Models.ModelElement, ISaleItem, NMF.Models.IModelElement
    {
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _returnReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveReturnReference);
        
        /// <summary>
        /// The backing field for the Return property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IReturn _return;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _saleReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveSaleReference);
        
        /// <summary>
        /// The backing field for the Sale property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ISalePrice _sale;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// The return property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("return")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IReturn Return
        {
            get
            {
                return this._return;
            }
            set
            {
                if ((this._return != value))
                {
                    IReturn old = this._return;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReturnChanging(e);
                    this.OnPropertyChanging("Return", e, _returnReference);
                    this._return = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetReturn;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetReturn;
                    }
                    this.OnReturnChanged(e);
                    this.OnPropertyChanged("Return", e, _returnReference);
                }
            }
        }
        
        /// <summary>
        /// The sale property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("sale")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public ISalePrice Sale
        {
            get
            {
                return this._sale;
            }
            set
            {
                if ((this._sale != value))
                {
                    ISalePrice old = this._sale;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSaleChanging(e);
                    this.OnPropertyChanging("Sale", e, _saleReference);
                    this._sale = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetSale;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetSale;
                    }
                    this.OnSaleChanged(e);
                    this.OnPropertyChanged("Sale", e, _saleReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<NMF.Models.IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new SaleItemChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<NMF.Models.IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new SaleItemReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("https://multi-workshop.github.io/warehouse/nmeta#//SaleItem")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Return property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReturnChanging;
        
        /// <summary>
        /// Gets fired when the Return property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReturnChanged;
        
        /// <summary>
        /// Gets fired before the Sale property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SaleChanging;
        
        /// <summary>
        /// Gets fired when the Sale property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SaleChanged;
        
        /// <summary>
        /// Gets the IndividualProduct for this model element
        /// </summary>
        public abstract IIndividualProduct GetIndividualProduct();
        
        private static NMF.Models.Meta.ITypedElement RetrieveReturnReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(Hsrm.DeepModeling.Warehouse.Warehouse.SaleItem.ClassInstance)).Resolve("return")));
        }
        
        /// <summary>
        /// Raises the ReturnChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReturnChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReturnChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReturnChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReturnChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReturnChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Return property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetReturn(object sender, System.EventArgs eventArgs)
        {
            this.Return = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveSaleReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(Hsrm.DeepModeling.Warehouse.Warehouse.SaleItem.ClassInstance)).Resolve("sale")));
        }
        
        /// <summary>
        /// Raises the SaleChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSaleChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SaleChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SaleChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSaleChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SaleChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Sale property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSale(object sender, System.EventArgs eventArgs)
        {
            this.Sale = null;
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(NMF.Models.IModelElement element)
        {
            if ((element == this.Return))
            {
                return ModelHelper.CreatePath("return");
            }
            if ((element == this.Sale))
            {
                return ModelHelper.CreatePath("sale");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override NMF.Models.IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "RETURN"))
            {
                return this.Return;
            }
            if ((reference == "SALE"))
            {
                return this.Sale;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "RETURN"))
            {
                this.Return = ((IReturn)(value));
                return;
            }
            if ((feature == "SALE"))
            {
                this.Sale = ((ISalePrice)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "RETURN"))
            {
                return new ReturnProxy(this);
            }
            if ((reference == "SALE"))
            {
                return new SaleProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("https://multi-workshop.github.io/warehouse/nmeta#//SaleItem")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the SaleItem class
        /// </summary>
        public class SaleItemChildrenCollection : ReferenceCollection, ICollectionExpression<NMF.Models.IModelElement>, ICollection<NMF.Models.IModelElement>
        {
            
            private SaleItem _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public SaleItemChildrenCollection(SaleItem parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Return != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Sale != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.ReturnChanged += this.PropagateValueChanges;
                this._parent.SaleChanged += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.ReturnChanged -= this.PropagateValueChanges;
                this._parent.SaleChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(NMF.Models.IModelElement item)
            {
                if ((this._parent.Return == null))
                {
                    IReturn returnCasted = item.As<IReturn>();
                    if ((returnCasted != null))
                    {
                        this._parent.Return = returnCasted;
                        return;
                    }
                }
                if ((this._parent.Sale == null))
                {
                    ISalePrice saleCasted = item.As<ISalePrice>();
                    if ((saleCasted != null))
                    {
                        this._parent.Sale = saleCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Return = null;
                this._parent.Sale = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(NMF.Models.IModelElement item)
            {
                if ((item == this._parent.Return))
                {
                    return true;
                }
                if ((item == this._parent.Sale))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(NMF.Models.IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Return != null))
                {
                    array[arrayIndex] = this._parent.Return;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Sale != null))
                {
                    array[arrayIndex] = this._parent.Sale;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(NMF.Models.IModelElement item)
            {
                if ((this._parent.Return == item))
                {
                    this._parent.Return = null;
                    return true;
                }
                if ((this._parent.Sale == item))
                {
                    this._parent.Sale = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<NMF.Models.IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<NMF.Models.IModelElement>().Concat(this._parent.Return).Concat(this._parent.Sale).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the SaleItem class
        /// </summary>
        public class SaleItemReferencedElementsCollection : ReferenceCollection, ICollectionExpression<NMF.Models.IModelElement>, ICollection<NMF.Models.IModelElement>
        {
            
            private SaleItem _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public SaleItemReferencedElementsCollection(SaleItem parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Return != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Sale != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.ReturnChanged += this.PropagateValueChanges;
                this._parent.SaleChanged += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.ReturnChanged -= this.PropagateValueChanges;
                this._parent.SaleChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(NMF.Models.IModelElement item)
            {
                if ((this._parent.Return == null))
                {
                    IReturn returnCasted = item.As<IReturn>();
                    if ((returnCasted != null))
                    {
                        this._parent.Return = returnCasted;
                        return;
                    }
                }
                if ((this._parent.Sale == null))
                {
                    ISalePrice saleCasted = item.As<ISalePrice>();
                    if ((saleCasted != null))
                    {
                        this._parent.Sale = saleCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Return = null;
                this._parent.Sale = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(NMF.Models.IModelElement item)
            {
                if ((item == this._parent.Return))
                {
                    return true;
                }
                if ((item == this._parent.Sale))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(NMF.Models.IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Return != null))
                {
                    array[arrayIndex] = this._parent.Return;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Sale != null))
                {
                    array[arrayIndex] = this._parent.Sale;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(NMF.Models.IModelElement item)
            {
                if ((this._parent.Return == item))
                {
                    this._parent.Return = null;
                    return true;
                }
                if ((this._parent.Sale == item))
                {
                    this._parent.Sale = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<NMF.Models.IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<NMF.Models.IModelElement>().Concat(this._parent.Return).Concat(this._parent.Sale).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the return property
        /// </summary>
        private sealed class ReturnProxy : ModelPropertyChange<ISaleItem, IReturn>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReturnProxy(ISaleItem modelElement) : 
                    base(modelElement, "return")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IReturn Value
            {
                get
                {
                    return this.ModelElement.Return;
                }
                set
                {
                    this.ModelElement.Return = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the sale property
        /// </summary>
        private sealed class SaleProxy : ModelPropertyChange<ISaleItem, ISalePrice>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SaleProxy(ISaleItem modelElement) : 
                    base(modelElement, "sale")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISalePrice Value
            {
                get
                {
                    return this.ModelElement.Sale;
                }
                set
                {
                    this.ModelElement.Sale = value;
                }
            }
        }
    }
}
