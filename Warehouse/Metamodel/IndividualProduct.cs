//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Hsrm.DeepModeling.Warehouse.Warehouse
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using NMF.Expressions;
    using NMF.Expressions.Linq;
    using NMF.Models;
    using NMF.Models.Meta;
    using NMF.Models.Collections;
    using NMF.Models.Expressions;
    using NMF.Collections.Generic;
    using NMF.Collections.ObjectModel;
    using NMF.Serialization;
    using NMF.Utilities;
    using System.Collections.Specialized;
    using NMF.Models.Repository;
    
    
    /// <summary>
    /// The default implementation of the IndividualProduct class
    /// </summary>
    [XmlNamespaceAttribute("https://multi-workshop.github.io/warehouse/nmeta")]
    [XmlNamespacePrefixAttribute("warehouse")]
    [ModelRepresentationClassAttribute("https://multi-workshop.github.io/warehouse/nmeta#//IndividualProduct")]
    [DebuggerDisplayAttribute("IndividualProduct {Name}")]
    public abstract partial class IndividualProduct : Product, IIndividualProduct, NMF.Models.IModelElement
    {
        
        /// <summary>
        /// The backing field for the IsAbstract property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isAbstract = false;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isAbstractAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsAbstractAttribute);
        
        /// <summary>
        /// The backing field for the IdentifierScope property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private NMF.Models.Meta.IdentifierScope _identifierScope;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _identifierScopeAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIdentifierScopeAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _identifierReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIdentifierReference);
        
        /// <summary>
        /// The backing field for the Identifier property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private NMF.Models.Meta.IAttribute _identifier;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _eventsReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveEventsReference);
        
        /// <summary>
        /// The backing field for the Events property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ReferenceTypeEventsCollection _events;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _referencesReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveReferencesReference);
        
        /// <summary>
        /// The backing field for the References property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ReferenceTypeReferencesCollection _references;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _operationsReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveOperationsReference);
        
        /// <summary>
        /// The backing field for the Operations property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private StructuredTypeOperationsCollection _operations;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _attributesReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveAttributesReference);
        
        /// <summary>
        /// The backing field for the Attributes property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private StructuredTypeAttributesCollection _attributes;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _namespaceReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveNamespaceReference);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        event EventHandler<ValueChangedEventArgs> IClass.InstanceOfChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> IClass.InstanceOfChanging
        {
            add
            {
            }
            remove
            {
            }
        }
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public IndividualProduct()
        {
            this._events = new ReferenceTypeEventsCollection(this);
            this._events.CollectionChanging += this.EventsCollectionChanging;
            this._events.CollectionChanged += this.EventsCollectionChanged;
            this._references = new ReferenceTypeReferencesCollection(this);
            this._references.CollectionChanging += this.ReferencesCollectionChanging;
            this._references.CollectionChanged += this.ReferencesCollectionChanged;
            this._operations = new StructuredTypeOperationsCollection(this);
            this._operations.CollectionChanging += this.OperationsCollectionChanging;
            this._operations.CollectionChanged += this.OperationsCollectionChanged;
            this._attributes = new StructuredTypeAttributesCollection(this);
            this._attributes.CollectionChanging += this.AttributesCollectionChanging;
            this._attributes.CollectionChanged += this.AttributesCollectionChanged;
        }
        
        ICollectionExpression<NMF.Models.Meta.IReferenceConstraint> IClass.ReferenceConstraints
        {
            get
            {
                return EmptyList<NMF.Models.Meta.IReferenceConstraint>.Instance;
            }
        }
        
        ICollectionExpression<NMF.Models.Meta.IAttributeConstraint> IClass.AttributeConstraints
        {
            get
            {
                return EmptyList<NMF.Models.Meta.IAttributeConstraint>.Instance;
            }
        }
        
        NMF.Models.Meta.IClass IClass.InstanceOf
        {
            get
            {
                return null;
            }
            set
            {
                if ((value != null))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        ICollectionExpression<NMF.Models.Meta.IClass> IClass.BaseTypes
        {
            get
            {
                return new IndividualProductBaseTypesCollection(this);
            }
        }
        
        /// <summary>
        /// The IsAbstract property
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [CategoryAttribute("Class")]
        [XmlAttributeAttribute(true)]
        public bool IsAbstract
        {
            get
            {
                return this._isAbstract;
            }
            set
            {
                if ((this._isAbstract != value))
                {
                    bool old = this._isAbstract;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIsAbstractChanging(e);
                    this.OnPropertyChanging("IsAbstract", e, _isAbstractAttribute);
                    this._isAbstract = value;
                    this.OnIsAbstractChanged(e);
                    this.OnPropertyChanged("IsAbstract", e, _isAbstractAttribute);
                }
            }
        }
        
        /// <summary>
        /// Specifies whether the identifier is valid only in the scope of its container or on a global scope.
        /// </summary>
        /// <remarks>This attribute is ignored when this class is not identified.</remarks>
        [DescriptionAttribute("Specifies whether the identifier is valid only in the scope of its container or o" +
            "n a global scope.")]
        [CategoryAttribute("Class")]
        [XmlAttributeAttribute(true)]
        public NMF.Models.Meta.IdentifierScope IdentifierScope
        {
            get
            {
                return this._identifierScope;
            }
            set
            {
                if ((this._identifierScope != value))
                {
                    NMF.Models.Meta.IdentifierScope old = this._identifierScope;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIdentifierScopeChanging(e);
                    this.OnPropertyChanging("IdentifierScope", e, _identifierScopeAttribute);
                    this._identifierScope = value;
                    this.OnIdentifierScopeChanged(e);
                    this.OnPropertyChanged("IdentifierScope", e, _identifierScopeAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the attribute that will identify instances of this class
        /// </summary>
        [DescriptionAttribute("Gets or sets the attribute that will identify instances of this class")]
        [CategoryAttribute("Class")]
        [XmlAttributeAttribute(true)]
        public NMF.Models.Meta.IAttribute Identifier
        {
            get
            {
                return this._identifier;
            }
            set
            {
                if ((this._identifier != value))
                {
                    NMF.Models.Meta.IAttribute old = this._identifier;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIdentifierChanging(e);
                    this.OnPropertyChanging("Identifier", e, _identifierReference);
                    this._identifier = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetIdentifier;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetIdentifier;
                    }
                    this.OnIdentifierChanged(e);
                    this.OnPropertyChanged("Identifier", e, _identifierReference);
                }
            }
        }
        
        /// <summary>
        /// The Events property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("DeclaringType")]
        [ConstantAttribute()]
        public ICollectionExpression<NMF.Models.Meta.IEvent> Events
        {
            get
            {
                return this._events;
            }
        }
        
        /// <summary>
        /// The References property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("DeclaringType")]
        [ConstantAttribute()]
        public ICollectionExpression<NMF.Models.Meta.IReference> References
        {
            get
            {
                return this._references;
            }
        }
        
        /// <summary>
        /// The Operations property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("DeclaringType")]
        [ConstantAttribute()]
        public ICollectionExpression<NMF.Models.Meta.IOperation> Operations
        {
            get
            {
                return this._operations;
            }
        }
        
        /// <summary>
        /// The Attributes property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("DeclaringType")]
        [ConstantAttribute()]
        public ICollectionExpression<NMF.Models.Meta.IAttribute> Attributes
        {
            get
            {
                return this._attributes;
            }
        }
        
        /// <summary>
        /// The Namespace property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("Types")]
        public NMF.Models.Meta.INamespace Namespace
        {
            get
            {
                return ModelHelper.CastAs<NMF.Models.Meta.INamespace>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<NMF.Models.IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new IndividualProductChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the ProductSpecification model for this type
        /// </summary>
        public new static IProductSpecification ProductSpecificationInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("https://multi-workshop.github.io/warehouse/nmeta#//IndividualProduct")));
                }
                return ((IProductSpecification)(_classInstance));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("https://multi-workshop.github.io/warehouse/nmeta#//IndividualProduct")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the IsAbstract property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsAbstractChanged;
        
        /// <summary>
        /// Gets fired before the IsAbstract property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsAbstractChanging;
        
        /// <summary>
        /// Gets fired when the IdentifierScope property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdentifierScopeChanged;
        
        /// <summary>
        /// Gets fired before the IdentifierScope property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdentifierScopeChanging;
        
        /// <summary>
        /// Gets fired before the Identifier property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdentifierChanging;
        
        /// <summary>
        /// Gets fired when the Identifier property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdentifierChanged;
        
        /// <summary>
        /// Gets fired before the Namespace property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NamespaceChanging;
        
        /// <summary>
        /// Gets fired when the Namespace property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NamespaceChanged;
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsAbstractAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(NMF.Models.Meta.Class.ClassInstance)).Resolve("IsAbstract")));
        }
        
        /// <summary>
        /// Raises the IsAbstractChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsAbstractChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsAbstractChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsAbstractChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsAbstractChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsAbstractChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIdentifierScopeAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(NMF.Models.Meta.Class.ClassInstance)).Resolve("IdentifierScope")));
        }
        
        /// <summary>
        /// Raises the IdentifierScopeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdentifierScopeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdentifierScopeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IdentifierScopeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdentifierScopeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdentifierScopeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIdentifierReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(NMF.Models.Meta.Class.ClassInstance)).Resolve("Identifier")));
        }
        
        /// <summary>
        /// Raises the IdentifierChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdentifierChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdentifierChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IdentifierChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdentifierChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdentifierChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Identifier property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetIdentifier(object sender, System.EventArgs eventArgs)
        {
            this.Identifier = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveEventsReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(NMF.Models.Meta.ReferenceType.ClassInstance)).Resolve("Events")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Events property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EventsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Events", e, _eventsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Events property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EventsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Events", e, _eventsReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveReferencesReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(NMF.Models.Meta.ReferenceType.ClassInstance)).Resolve("References")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the References property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ReferencesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("References", e, _referencesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the References property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ReferencesCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("References", e, _referencesReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveOperationsReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(NMF.Models.Meta.StructuredType.ClassInstance)).Resolve("Operations")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Operations property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OperationsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Operations", e, _operationsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Operations property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OperationsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Operations", e, _operationsReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveAttributesReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(NMF.Models.Meta.StructuredType.ClassInstance)).Resolve("Attributes")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Attributes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AttributesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Attributes", e, _attributesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Attributes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AttributesCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Attributes", e, _attributesReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveNamespaceReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(NMF.Models.Meta.Type.ClassInstance)).Resolve("Namespace")));
        }
        
        /// <summary>
        /// Raises the NamespaceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNamespaceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NamespaceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(NMF.Models.IModelElement newParent, NMF.Models.IModelElement oldParent)
        {
            NMF.Models.Meta.INamespace oldNamespace = ModelHelper.CastAs<NMF.Models.Meta.INamespace>(oldParent);
            NMF.Models.Meta.INamespace newNamespace = ModelHelper.CastAs<NMF.Models.Meta.INamespace>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldNamespace, newNamespace);
            this.OnNamespaceChanging(e);
            this.OnPropertyChanging("Namespace", e, _namespaceReference);
        }
        
        /// <summary>
        /// Raises the NamespaceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNamespaceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NamespaceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(NMF.Models.IModelElement newParent, NMF.Models.IModelElement oldParent)
        {
            NMF.Models.Meta.INamespace oldNamespace = ModelHelper.CastAs<NMF.Models.Meta.INamespace>(oldParent);
            NMF.Models.Meta.INamespace newNamespace = ModelHelper.CastAs<NMF.Models.Meta.INamespace>(newParent);
            if ((oldNamespace != null))
            {
                oldNamespace.Types.Remove(this);
            }
            if ((newNamespace != null))
            {
                newNamespace.Types.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldNamespace, newNamespace);
            this.OnNamespaceChanged(e);
            this.OnPropertyChanged("Namespace", e, _namespaceReference);
            base.OnParentChanged(newParent, oldParent);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override NMF.Models.IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "IDENTIFIER"))
            {
                return this.Identifier;
            }
            if ((reference == "NAMESPACE"))
            {
                return this.Namespace;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ISABSTRACT"))
            {
                return this.IsAbstract;
            }
            if ((attribute == "IDENTIFIERSCOPE"))
            {
                return this.IdentifierScope;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "EVENTS"))
            {
                return this._events;
            }
            if ((feature == "REFERENCES"))
            {
                return this._references;
            }
            if ((feature == "OPERATIONS"))
            {
                return this._operations;
            }
            if ((feature == "ATTRIBUTES"))
            {
                return this._attributes;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "IDENTIFIER"))
            {
                this.Identifier = ((NMF.Models.Meta.IAttribute)(value));
                return;
            }
            if ((feature == "NAMESPACE"))
            {
                this.Namespace = ((NMF.Models.Meta.INamespace)(value));
                return;
            }
            if ((feature == "ISABSTRACT"))
            {
                this.IsAbstract = ((bool)(value));
                return;
            }
            if ((feature == "IDENTIFIERSCOPE"))
            {
                this.IdentifierScope = ((NMF.Models.Meta.IdentifierScope)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ISABSTRACT"))
            {
                return Observable.Box(new IsAbstractProxy(this));
            }
            if ((attribute == "IDENTIFIERSCOPE"))
            {
                return Observable.Box(new IdentifierScopeProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "IDENTIFIER"))
            {
                return new IdentifierProxy(this);
            }
            if ((reference == "NAMESPACE"))
            {
                return new NamespaceProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._events))
            {
                return "Events";
            }
            if ((container == this._references))
            {
                return "References";
            }
            if ((container == this._operations))
            {
                return "Operations";
            }
            if ((container == this._attributes))
            {
                return "Attributes";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the ProductSpecification for this model element
        /// </summary>
        public override IProductSpecification GetProductSpecification()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("https://multi-workshop.github.io/warehouse/nmeta#//IndividualProduct")));
            }
            return ((IProductSpecification)(_classInstance));
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("https://multi-workshop.github.io/warehouse/nmeta#//IndividualProduct")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the IndividualProduct class
        /// </summary>
        public class IndividualProductChildrenCollection : ReferenceCollection, ICollectionExpression<NMF.Models.IModelElement>, ICollection<NMF.Models.IModelElement>
        {
            
            private IndividualProduct _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public IndividualProductChildrenCollection(IndividualProduct parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Events.Count);
                    count = (count + this._parent.References.Count);
                    count = (count + this._parent.Operations.Count);
                    count = (count + this._parent.Attributes.Count);
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Events.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.References.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Operations.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Attributes.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Events.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.References.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Operations.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Attributes.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(NMF.Models.IModelElement item)
            {
                IEvent eventsCasted = item.As<IEvent>();
                if ((eventsCasted != null))
                {
                    this._parent.Events.Add(eventsCasted);
                }
                IReference referencesCasted = item.As<IReference>();
                if ((referencesCasted != null))
                {
                    this._parent.References.Add(referencesCasted);
                }
                IOperation operationsCasted = item.As<IOperation>();
                if ((operationsCasted != null))
                {
                    this._parent.Operations.Add(operationsCasted);
                }
                IAttribute attributesCasted = item.As<IAttribute>();
                if ((attributesCasted != null))
                {
                    this._parent.Attributes.Add(attributesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Events.Clear();
                this._parent.References.Clear();
                this._parent.Operations.Clear();
                this._parent.Attributes.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(NMF.Models.IModelElement item)
            {
                if (this._parent.Events.Contains(item))
                {
                    return true;
                }
                if (this._parent.References.Contains(item))
                {
                    return true;
                }
                if (this._parent.Operations.Contains(item))
                {
                    return true;
                }
                if (this._parent.Attributes.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(NMF.Models.IModelElement[] array, int arrayIndex)
            {
                IEnumerator<NMF.Models.IModelElement> eventsEnumerator = this._parent.Events.GetEnumerator();
                try
                {
                    for (
                    ; eventsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = eventsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    eventsEnumerator.Dispose();
                }
                IEnumerator<NMF.Models.IModelElement> referencesEnumerator = this._parent.References.GetEnumerator();
                try
                {
                    for (
                    ; referencesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = referencesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    referencesEnumerator.Dispose();
                }
                IEnumerator<NMF.Models.IModelElement> operationsEnumerator = this._parent.Operations.GetEnumerator();
                try
                {
                    for (
                    ; operationsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = operationsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    operationsEnumerator.Dispose();
                }
                IEnumerator<NMF.Models.IModelElement> attributesEnumerator = this._parent.Attributes.GetEnumerator();
                try
                {
                    for (
                    ; attributesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = attributesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    attributesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(NMF.Models.IModelElement item)
            {
                IEvent eventItem = item.As<IEvent>();
                if (((eventItem != null) 
                            && this._parent.Events.Remove(eventItem)))
                {
                    return true;
                }
                IReference referenceItem = item.As<IReference>();
                if (((referenceItem != null) 
                            && this._parent.References.Remove(referenceItem)))
                {
                    return true;
                }
                IOperation operationItem = item.As<IOperation>();
                if (((operationItem != null) 
                            && this._parent.Operations.Remove(operationItem)))
                {
                    return true;
                }
                IAttribute attributeItem = item.As<IAttribute>();
                if (((attributeItem != null) 
                            && this._parent.Attributes.Remove(attributeItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<NMF.Models.IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<NMF.Models.IModelElement>().Concat(this._parent.Events).Concat(this._parent.References).Concat(this._parent.Operations).Concat(this._parent.Attributes).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IsAbstract property
        /// </summary>
        private sealed class IsAbstractProxy : ModelPropertyChange<NMF.Models.Meta.IClass, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsAbstractProxy(NMF.Models.Meta.IClass modelElement) : 
                    base(modelElement, "IsAbstract")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsAbstract;
                }
                set
                {
                    this.ModelElement.IsAbstract = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IdentifierScope property
        /// </summary>
        private sealed class IdentifierScopeProxy : ModelPropertyChange<NMF.Models.Meta.IClass, NMF.Models.Meta.IdentifierScope>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IdentifierScopeProxy(NMF.Models.Meta.IClass modelElement) : 
                    base(modelElement, "IdentifierScope")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override NMF.Models.Meta.IdentifierScope Value
            {
                get
                {
                    return this.ModelElement.IdentifierScope;
                }
                set
                {
                    this.ModelElement.IdentifierScope = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the InstanceOf property
        /// </summary>
        private sealed class InstanceOfProxy : ModelPropertyChange<NMF.Models.Meta.IClass, NMF.Models.Meta.IClass>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InstanceOfProxy(NMF.Models.Meta.IClass modelElement) : 
                    base(modelElement, "InstanceOf")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override NMF.Models.Meta.IClass Value
            {
                get
                {
                    return this.ModelElement.InstanceOf;
                }
                set
                {
                    this.ModelElement.InstanceOf = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Identifier property
        /// </summary>
        private sealed class IdentifierProxy : ModelPropertyChange<NMF.Models.Meta.IClass, NMF.Models.Meta.IAttribute>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IdentifierProxy(NMF.Models.Meta.IClass modelElement) : 
                    base(modelElement, "Identifier")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override NMF.Models.Meta.IAttribute Value
            {
                get
                {
                    return this.ModelElement.Identifier;
                }
                set
                {
                    this.ModelElement.Identifier = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Namespace property
        /// </summary>
        private sealed class NamespaceProxy : ModelPropertyChange<NMF.Models.Meta.IType, NMF.Models.Meta.INamespace>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NamespaceProxy(NMF.Models.Meta.IType modelElement) : 
                    base(modelElement, "Namespace")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override NMF.Models.Meta.INamespace Value
            {
                get
                {
                    return this.ModelElement.Namespace;
                }
                set
                {
                    this.ModelElement.Namespace = value;
                }
            }
        }
    }
}
