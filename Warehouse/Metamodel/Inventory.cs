//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Hsrm.DeepModeling.Warehouse.Warehouse
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using NMF.Expressions;
    using NMF.Expressions.Linq;
    using NMF.Models;
    using NMF.Models.Meta;
    using NMF.Models.Collections;
    using NMF.Models.Expressions;
    using NMF.Collections.Generic;
    using NMF.Collections.ObjectModel;
    using NMF.Serialization;
    using NMF.Utilities;
    using System.Collections.Specialized;
    using NMF.Models.Repository;
    
    
    /// <summary>
    /// The default implementation of the Inventory class
    /// </summary>
    [XmlNamespaceAttribute("https://multi-workshop.github.io/warehouse/nmeta")]
    [XmlNamespacePrefixAttribute("warehouse")]
    [ModelRepresentationClassAttribute("https://multi-workshop.github.io/warehouse/nmeta#//Inventory")]
    public partial class Inventory : NMF.Models.ModelElement, IInventory, NMF.Models.IModelElement
    {
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _bulkProductsReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveBulkProductsReference);
        
        /// <summary>
        /// The backing field for the BulkProducts property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionList<IBulkProduct> _bulkProducts;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _itemsReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveItemsReference);
        
        /// <summary>
        /// The backing field for the Items property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionList<ISaleItem> _items;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public Inventory()
        {
            this._bulkProducts = new ObservableCompositionList<IBulkProduct>(this);
            this._bulkProducts.CollectionChanging += this.BulkProductsCollectionChanging;
            this._bulkProducts.CollectionChanged += this.BulkProductsCollectionChanged;
            this._items = new ObservableCompositionList<ISaleItem>(this);
            this._items.CollectionChanging += this.ItemsCollectionChanging;
            this._items.CollectionChanged += this.ItemsCollectionChanged;
        }
        
        /// <summary>
        /// The bulkProducts property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("bulkProducts")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public ICollectionExpression<IBulkProduct> BulkProducts
        {
            get
            {
                return this._bulkProducts;
            }
        }
        
        /// <summary>
        /// The items property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("items")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public ICollectionExpression<ISaleItem> Items
        {
            get
            {
                return this._items;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<NMF.Models.IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new InventoryChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<NMF.Models.IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new InventoryReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("https://multi-workshop.github.io/warehouse/nmeta#//Inventory")));
                }
                return _classInstance;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveBulkProductsReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(Hsrm.DeepModeling.Warehouse.Warehouse.Inventory.ClassInstance)).Resolve("bulkProducts")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the BulkProducts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BulkProductsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("BulkProducts", e, _bulkProductsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the BulkProducts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BulkProductsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("BulkProducts", e, _bulkProductsReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveItemsReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(Hsrm.DeepModeling.Warehouse.Warehouse.Inventory.ClassInstance)).Resolve("items")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Items property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ItemsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Items", e, _itemsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Items property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ItemsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Items", e, _itemsReference);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "BULKPRODUCTS"))
            {
                return this._bulkProducts;
            }
            if ((feature == "ITEMS"))
            {
                return this._items;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._bulkProducts))
            {
                return "bulkProducts";
            }
            if ((container == this._items))
            {
                return "items";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("https://multi-workshop.github.io/warehouse/nmeta#//Inventory")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Inventory class
        /// </summary>
        public class InventoryChildrenCollection : ReferenceCollection, ICollectionExpression<NMF.Models.IModelElement>, ICollection<NMF.Models.IModelElement>
        {
            
            private Inventory _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public InventoryChildrenCollection(Inventory parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.BulkProducts.Count);
                    count = (count + this._parent.Items.Count);
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.BulkProducts.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Items.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.BulkProducts.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Items.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(NMF.Models.IModelElement item)
            {
                IBulkProduct bulkProductsCasted = item.As<IBulkProduct>();
                if ((bulkProductsCasted != null))
                {
                    this._parent.BulkProducts.Add(bulkProductsCasted);
                }
                ISaleItem itemsCasted = item.As<ISaleItem>();
                if ((itemsCasted != null))
                {
                    this._parent.Items.Add(itemsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.BulkProducts.Clear();
                this._parent.Items.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(NMF.Models.IModelElement item)
            {
                if (this._parent.BulkProducts.Contains(item))
                {
                    return true;
                }
                if (this._parent.Items.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(NMF.Models.IModelElement[] array, int arrayIndex)
            {
                IEnumerator<NMF.Models.IModelElement> bulkProductsEnumerator = this._parent.BulkProducts.GetEnumerator();
                try
                {
                    for (
                    ; bulkProductsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = bulkProductsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    bulkProductsEnumerator.Dispose();
                }
                IEnumerator<NMF.Models.IModelElement> itemsEnumerator = this._parent.Items.GetEnumerator();
                try
                {
                    for (
                    ; itemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = itemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    itemsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(NMF.Models.IModelElement item)
            {
                IBulkProduct bulkProductItem = item.As<IBulkProduct>();
                if (((bulkProductItem != null) 
                            && this._parent.BulkProducts.Remove(bulkProductItem)))
                {
                    return true;
                }
                ISaleItem saleItemItem = item.As<ISaleItem>();
                if (((saleItemItem != null) 
                            && this._parent.Items.Remove(saleItemItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<NMF.Models.IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<NMF.Models.IModelElement>().Concat(this._parent.BulkProducts).Concat(this._parent.Items).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Inventory class
        /// </summary>
        public class InventoryReferencedElementsCollection : ReferenceCollection, ICollectionExpression<NMF.Models.IModelElement>, ICollection<NMF.Models.IModelElement>
        {
            
            private Inventory _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public InventoryReferencedElementsCollection(Inventory parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.BulkProducts.Count);
                    count = (count + this._parent.Items.Count);
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.BulkProducts.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Items.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.BulkProducts.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Items.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(NMF.Models.IModelElement item)
            {
                IBulkProduct bulkProductsCasted = item.As<IBulkProduct>();
                if ((bulkProductsCasted != null))
                {
                    this._parent.BulkProducts.Add(bulkProductsCasted);
                }
                ISaleItem itemsCasted = item.As<ISaleItem>();
                if ((itemsCasted != null))
                {
                    this._parent.Items.Add(itemsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.BulkProducts.Clear();
                this._parent.Items.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(NMF.Models.IModelElement item)
            {
                if (this._parent.BulkProducts.Contains(item))
                {
                    return true;
                }
                if (this._parent.Items.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(NMF.Models.IModelElement[] array, int arrayIndex)
            {
                IEnumerator<NMF.Models.IModelElement> bulkProductsEnumerator = this._parent.BulkProducts.GetEnumerator();
                try
                {
                    for (
                    ; bulkProductsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = bulkProductsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    bulkProductsEnumerator.Dispose();
                }
                IEnumerator<NMF.Models.IModelElement> itemsEnumerator = this._parent.Items.GetEnumerator();
                try
                {
                    for (
                    ; itemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = itemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    itemsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(NMF.Models.IModelElement item)
            {
                IBulkProduct bulkProductItem = item.As<IBulkProduct>();
                if (((bulkProductItem != null) 
                            && this._parent.BulkProducts.Remove(bulkProductItem)))
                {
                    return true;
                }
                ISaleItem saleItemItem = item.As<ISaleItem>();
                if (((saleItemItem != null) 
                            && this._parent.Items.Remove(saleItemItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<NMF.Models.IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<NMF.Models.IModelElement>().Concat(this._parent.BulkProducts).Concat(this._parent.Items).GetEnumerator();
            }
        }
    }
}
