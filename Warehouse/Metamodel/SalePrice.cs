//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Hsrm.DeepModeling.Warehouse.Warehouse
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using NMF.Expressions;
    using NMF.Expressions.Linq;
    using NMF.Models;
    using NMF.Models.Meta;
    using NMF.Models.Collections;
    using NMF.Models.Expressions;
    using NMF.Collections.Generic;
    using NMF.Collections.ObjectModel;
    using NMF.Serialization;
    using NMF.Utilities;
    using System.Collections.Specialized;
    using NMF.Models.Repository;
    
    
    /// <summary>
    /// The default implementation of the SalePrice class
    /// </summary>
    [XmlNamespaceAttribute("https://multi-workshop.github.io/warehouse/nmeta")]
    [XmlNamespacePrefixAttribute("warehouse")]
    [ModelRepresentationClassAttribute("https://multi-workshop.github.io/warehouse/nmeta#//SalePrice")]
    public partial class SalePrice : NMF.Models.ModelElement, ISalePrice, NMF.Models.IModelElement
    {
        
        /// <summary>
        /// The backing field for the ReducedPrice property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private double _reducedPrice;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _reducedPriceAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveReducedPriceAttribute);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// The reducedPrice property
        /// </summary>
        [DisplayNameAttribute("reducedPrice")]
        [CategoryAttribute("SalePrice")]
        [XmlElementNameAttribute("reducedPrice")]
        [XmlAttributeAttribute(true)]
        public double ReducedPrice
        {
            get
            {
                return this._reducedPrice;
            }
            set
            {
                if ((this._reducedPrice != value))
                {
                    double old = this._reducedPrice;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReducedPriceChanging(e);
                    this.OnPropertyChanging("ReducedPrice", e, _reducedPriceAttribute);
                    this._reducedPrice = value;
                    this.OnReducedPriceChanged(e);
                    this.OnPropertyChanged("ReducedPrice", e, _reducedPriceAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("https://multi-workshop.github.io/warehouse/nmeta#//SalePrice")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the ReducedPrice property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReducedPriceChanged;
        
        /// <summary>
        /// Gets fired before the ReducedPrice property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReducedPriceChanging;
        
        private static NMF.Models.Meta.ITypedElement RetrieveReducedPriceAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(Hsrm.DeepModeling.Warehouse.Warehouse.SalePrice.ClassInstance)).Resolve("reducedPrice")));
        }
        
        /// <summary>
        /// Raises the ReducedPriceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReducedPriceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReducedPriceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReducedPriceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReducedPriceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReducedPriceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "REDUCEDPRICE"))
            {
                return this.ReducedPrice;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "REDUCEDPRICE"))
            {
                this.ReducedPrice = ((double)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "REDUCEDPRICE"))
            {
                return Observable.Box(new ReducedPriceProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("https://multi-workshop.github.io/warehouse/nmeta#//SalePrice")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the reducedPrice property
        /// </summary>
        private sealed class ReducedPriceProxy : ModelPropertyChange<ISalePrice, double>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReducedPriceProxy(ISalePrice modelElement) : 
                    base(modelElement, "reducedPrice")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override double Value
            {
                get
                {
                    return this.ModelElement.ReducedPrice;
                }
                set
                {
                    this.ModelElement.ReducedPrice = value;
                }
            }
        }
    }
}
