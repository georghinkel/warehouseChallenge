//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Hsrm.DeepModeling.Warehouse.Warehouse
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using NMF.Expressions;
    using NMF.Expressions.Linq;
    using NMF.Models;
    using NMF.Models.Meta;
    using NMF.Models.Collections;
    using NMF.Models.Expressions;
    using NMF.Collections.Generic;
    using NMF.Collections.ObjectModel;
    using NMF.Serialization;
    using NMF.Utilities;
    using System.Collections.Specialized;
    using NMF.Models.Repository;
    
    
    /// <summary>
    /// The default implementation of the Product class
    /// </summary>
    [XmlNamespaceAttribute("https://multi-workshop.github.io/warehouse/nmeta")]
    [XmlNamespacePrefixAttribute("warehouse")]
    [ModelRepresentationClassAttribute("https://multi-workshop.github.io/warehouse/nmeta#//Product")]
    [DebuggerDisplayAttribute("Product {Name}")]
    public abstract partial class Product : NMF.Models.Meta.MetaElement, IProduct, NMF.Models.IModelElement
    {
        
        /// <summary>
        /// The backing field for the SalesPrice property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private double _salesPrice;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _salesPriceAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveSalesPriceAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _recommendsReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveRecommendsReference);
        
        /// <summary>
        /// The backing field for the Recommends property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableAssociationList<IProduct> _recommends;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public Product()
        {
            this._recommends = new ObservableAssociationList<IProduct>();
            this._recommends.CollectionChanging += this.RecommendsCollectionChanging;
            this._recommends.CollectionChanged += this.RecommendsCollectionChanged;
        }
        
        /// <summary>
        /// The salesPrice property
        /// </summary>
        [DisplayNameAttribute("salesPrice")]
        [CategoryAttribute("Product")]
        [XmlElementNameAttribute("salesPrice")]
        [XmlAttributeAttribute(true)]
        public double SalesPrice
        {
            get
            {
                return this._salesPrice;
            }
            set
            {
                if ((this._salesPrice != value))
                {
                    double old = this._salesPrice;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSalesPriceChanging(e);
                    this.OnPropertyChanging("SalesPrice", e, _salesPriceAttribute);
                    this._salesPrice = value;
                    this.OnSalesPriceChanged(e);
                    this.OnPropertyChanged("SalesPrice", e, _salesPriceAttribute);
                }
            }
        }
        
        /// <summary>
        /// The recommends property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("recommends")]
        [CategoryAttribute("Product")]
        [XmlElementNameAttribute("recommends")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public ICollectionExpression<IProduct> Recommends
        {
            get
            {
                return this._recommends;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<NMF.Models.IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ProductReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("https://multi-workshop.github.io/warehouse/nmeta#//Product")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the SalesPrice property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SalesPriceChanged;
        
        /// <summary>
        /// Gets fired before the SalesPrice property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SalesPriceChanging;
        
        /// <summary>
        /// Gets the ProductSpecification for this model element
        /// </summary>
        public abstract IProductSpecification GetProductSpecification();
        
        private static NMF.Models.Meta.ITypedElement RetrieveSalesPriceAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(Hsrm.DeepModeling.Warehouse.Warehouse.Product.ClassInstance)).Resolve("salesPrice")));
        }
        
        /// <summary>
        /// Raises the SalesPriceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSalesPriceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SalesPriceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SalesPriceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSalesPriceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SalesPriceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveRecommendsReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(Hsrm.DeepModeling.Warehouse.Warehouse.Product.ClassInstance)).Resolve("recommends")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Recommends property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RecommendsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Recommends", e, _recommendsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Recommends property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RecommendsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Recommends", e, _recommendsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "SALESPRICE"))
            {
                return this.SalesPrice;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "RECOMMENDS"))
            {
                return this._recommends;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SALESPRICE"))
            {
                this.SalesPrice = ((double)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "SALESPRICE"))
            {
                return Observable.Box(new SalesPriceProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("https://multi-workshop.github.io/warehouse/nmeta#//Product")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Product class
        /// </summary>
        public class ProductReferencedElementsCollection : ReferenceCollection, ICollectionExpression<NMF.Models.IModelElement>, ICollection<NMF.Models.IModelElement>
        {
            
            private Product _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ProductReferencedElementsCollection(Product parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Recommends.Count);
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Recommends.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Recommends.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(NMF.Models.IModelElement item)
            {
                IProduct recommendsCasted = item.As<IProduct>();
                if ((recommendsCasted != null))
                {
                    this._parent.Recommends.Add(recommendsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Recommends.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(NMF.Models.IModelElement item)
            {
                if (this._parent.Recommends.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(NMF.Models.IModelElement[] array, int arrayIndex)
            {
                IEnumerator<NMF.Models.IModelElement> recommendsEnumerator = this._parent.Recommends.GetEnumerator();
                try
                {
                    for (
                    ; recommendsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = recommendsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    recommendsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(NMF.Models.IModelElement item)
            {
                IProduct productItem = item.As<IProduct>();
                if (((productItem != null) 
                            && this._parent.Recommends.Remove(productItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<NMF.Models.IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<NMF.Models.IModelElement>().Concat(this._parent.Recommends).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the salesPrice property
        /// </summary>
        private sealed class SalesPriceProxy : ModelPropertyChange<IProduct, double>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SalesPriceProxy(IProduct modelElement) : 
                    base(modelElement, "salesPrice")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override double Value
            {
                get
                {
                    return this.ModelElement.SalesPrice;
                }
                set
                {
                    this.ModelElement.SalesPrice = value;
                }
            }
        }
    }
}
