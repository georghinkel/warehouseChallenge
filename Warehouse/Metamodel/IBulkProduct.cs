//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Hsrm.DeepModeling.Warehouse.Warehouse
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using NMF.Expressions;
    using NMF.Expressions.Linq;
    using NMF.Models;
    using NMF.Models.Meta;
    using NMF.Models.Collections;
    using NMF.Models.Expressions;
    using NMF.Collections.Generic;
    using NMF.Collections.ObjectModel;
    using NMF.Serialization;
    using NMF.Utilities;
    using System.Collections.Specialized;
    using NMF.Models.Repository;
    
    
    /// <summary>
    /// The public interface for BulkProduct
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(BulkProduct))]
    [XmlDefaultImplementationTypeAttribute(typeof(BulkProduct))]
    [ModelRepresentationClassAttribute("https://multi-workshop.github.io/warehouse/nmeta#//BulkProduct")]
    public interface IBulkProduct : NMF.Models.IModelElement, IProduct
    {
        
        /// <summary>
        /// The quantity property
        /// </summary>
        [DisplayNameAttribute("quantity")]
        [CategoryAttribute("BulkProduct")]
        [XmlElementNameAttribute("quantity")]
        [XmlAttributeAttribute(true)]
        int Quantity
        {
            get;
            set;
        }
        
        /// <summary>
        /// The stock property
        /// </summary>
        [DisplayNameAttribute("stock")]
        [CategoryAttribute("BulkProduct")]
        [XmlElementNameAttribute("stock")]
        [XmlAttributeAttribute(true)]
        int Stock
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Quantity property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> QuantityChanged;
        
        /// <summary>
        /// Gets fired before the Quantity property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> QuantityChanging;
        
        /// <summary>
        /// Gets fired when the Stock property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StockChanged;
        
        /// <summary>
        /// Gets fired before the Stock property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StockChanging;
    }
}
