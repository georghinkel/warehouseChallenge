//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Hsrm.DeepModeling.Warehouse.Products.MyWarehouse
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using NMF.Expressions;
    using NMF.Expressions.Linq;
    using NMF.Models;
    using NMF.Models.Meta;
    using NMF.Models.Collections;
    using NMF.Models.Expressions;
    using NMF.Collections.Generic;
    using NMF.Collections.ObjectModel;
    using NMF.Serialization;
    using NMF.Utilities;
    using NMF.Models.Repository;
    using Hsrm.DeepModeling.Warehouse.Warehouse;
    using System.Collections.Specialized;
    
    
    /// <summary>
    /// The default implementation of the DVD class
    /// </summary>
    [XmlNamespaceAttribute("https://example.org")]
    [XmlNamespacePrefixAttribute("ex")]
    [ModelRepresentationClassAttribute("https://example.org/#//DVD")]
    [DebuggerDisplayAttribute("DVD {Name}")]
    public partial class DVD : NMF.Models.Meta.ReferenceType, IDVD, NMF.Models.IModelElement
    {
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _recommendedPlayerReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveRecommendedPlayerReference);
        
        /// <summary>
        /// The backing field for the RecommendedPlayer property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IDVDPlayer _recommendedPlayer;
        
        /// <summary>
        /// The backing field for the SalesPrice property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private double _salesPrice;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _salesPriceAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveSalesPriceAttribute);
        
        /// <summary>
        /// The backing field for the IsAbstract property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isAbstract = false;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isAbstractAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsAbstractAttribute);
        
        /// <summary>
        /// The backing field for the IdentifierScope property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private NMF.Models.Meta.IdentifierScope _identifierScope;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _identifierScopeAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIdentifierScopeAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _identifierReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIdentifierReference);
        
        /// <summary>
        /// The backing field for the Identifier property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private NMF.Models.Meta.IAttribute _identifier;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        event EventHandler<ValueChangedEventArgs> IClass.InstanceOfChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> IClass.InstanceOfChanging
        {
            add
            {
            }
            remove
            {
            }
        }
        
        /// <summary>
        /// The recommendedPlayer property
        /// </summary>
        [DisplayNameAttribute("recommendedPlayer")]
        [CategoryAttribute("DVD")]
        [XmlElementNameAttribute("recommendedPlayer")]
        [XmlAttributeAttribute(true)]
        public IDVDPlayer RecommendedPlayer
        {
            get
            {
                return this._recommendedPlayer;
            }
            set
            {
                if ((this._recommendedPlayer != value))
                {
                    IDVDPlayer old = this._recommendedPlayer;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRecommendedPlayerChanging(e);
                    this.OnPropertyChanging("RecommendedPlayer", e, _recommendedPlayerReference);
                    this._recommendedPlayer = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRecommendedPlayer;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRecommendedPlayer;
                    }
                    this.OnRecommendedPlayerChanged(e);
                    this.OnPropertyChanged("RecommendedPlayer", e, _recommendedPlayerReference);
                }
            }
        }
        
        ICollectionExpression<Hsrm.DeepModeling.Warehouse.Warehouse.IProduct> IProduct.Recommends
        {
            get
            {
                return new DVDRecommendsCollection(this);
            }
        }
        
        ICollectionExpression<NMF.Models.Meta.IReferenceConstraint> IClass.ReferenceConstraints
        {
            get
            {
                return EmptyList<NMF.Models.Meta.IReferenceConstraint>.Instance;
            }
        }
        
        ICollectionExpression<NMF.Models.Meta.IAttributeConstraint> IClass.AttributeConstraints
        {
            get
            {
                return EmptyList<NMF.Models.Meta.IAttributeConstraint>.Instance;
            }
        }
        
        NMF.Models.Meta.IClass IClass.InstanceOf
        {
            get
            {
                return null;
            }
            set
            {
                if ((value != null))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        ICollectionExpression<NMF.Models.Meta.IClass> IClass.BaseTypes
        {
            get
            {
                return new IndividualProductBaseTypesCollection(this);
            }
        }
        
        /// <summary>
        /// The salesPrice property
        /// </summary>
        [DisplayNameAttribute("salesPrice")]
        [CategoryAttribute("Product")]
        [XmlElementNameAttribute("salesPrice")]
        [XmlAttributeAttribute(true)]
        public double SalesPrice
        {
            get
            {
                return this._salesPrice;
            }
            set
            {
                if ((this._salesPrice != value))
                {
                    double old = this._salesPrice;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSalesPriceChanging(e);
                    this.OnPropertyChanging("SalesPrice", e, _salesPriceAttribute);
                    this._salesPrice = value;
                    this.OnSalesPriceChanged(e);
                    this.OnPropertyChanged("SalesPrice", e, _salesPriceAttribute);
                }
            }
        }
        
        /// <summary>
        /// The IsAbstract property
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [CategoryAttribute("Class")]
        [XmlAttributeAttribute(true)]
        public bool IsAbstract
        {
            get
            {
                return this._isAbstract;
            }
            set
            {
                if ((this._isAbstract != value))
                {
                    bool old = this._isAbstract;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIsAbstractChanging(e);
                    this.OnPropertyChanging("IsAbstract", e, _isAbstractAttribute);
                    this._isAbstract = value;
                    this.OnIsAbstractChanged(e);
                    this.OnPropertyChanged("IsAbstract", e, _isAbstractAttribute);
                }
            }
        }
        
        /// <summary>
        /// Specifies whether the identifier is valid only in the scope of its container or on a global scope.
        /// </summary>
        /// <remarks>This attribute is ignored when this class is not identified.</remarks>
        [DescriptionAttribute("Specifies whether the identifier is valid only in the scope of its container or o" +
            "n a global scope.")]
        [CategoryAttribute("Class")]
        [XmlAttributeAttribute(true)]
        public NMF.Models.Meta.IdentifierScope IdentifierScope
        {
            get
            {
                return this._identifierScope;
            }
            set
            {
                if ((this._identifierScope != value))
                {
                    NMF.Models.Meta.IdentifierScope old = this._identifierScope;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIdentifierScopeChanging(e);
                    this.OnPropertyChanging("IdentifierScope", e, _identifierScopeAttribute);
                    this._identifierScope = value;
                    this.OnIdentifierScopeChanged(e);
                    this.OnPropertyChanged("IdentifierScope", e, _identifierScopeAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the attribute that will identify instances of this class
        /// </summary>
        [DescriptionAttribute("Gets or sets the attribute that will identify instances of this class")]
        [CategoryAttribute("Class")]
        [XmlAttributeAttribute(true)]
        public NMF.Models.Meta.IAttribute Identifier
        {
            get
            {
                return this._identifier;
            }
            set
            {
                if ((this._identifier != value))
                {
                    NMF.Models.Meta.IAttribute old = this._identifier;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIdentifierChanging(e);
                    this.OnPropertyChanging("Identifier", e, _identifierReference);
                    this._identifier = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetIdentifier;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetIdentifier;
                    }
                    this.OnIdentifierChanged(e);
                    this.OnPropertyChanged("Identifier", e, _identifierReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<NMF.Models.IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new DVDReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the ProductSpecification model for this type
        /// </summary>
        public static Hsrm.DeepModeling.Warehouse.Warehouse.IProductSpecification ProductSpecificationInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("https://example.org/#//DVD")));
                }
                return ((Hsrm.DeepModeling.Warehouse.Warehouse.IProductSpecification)(_classInstance));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("https://example.org/#//DVD")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the RecommendedPlayer property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RecommendedPlayerChanging;
        
        /// <summary>
        /// Gets fired when the RecommendedPlayer property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RecommendedPlayerChanged;
        
        /// <summary>
        /// Gets fired when the SalesPrice property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SalesPriceChanged;
        
        /// <summary>
        /// Gets fired before the SalesPrice property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SalesPriceChanging;
        
        /// <summary>
        /// Gets fired when the IsAbstract property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsAbstractChanged;
        
        /// <summary>
        /// Gets fired before the IsAbstract property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsAbstractChanging;
        
        /// <summary>
        /// Gets fired when the IdentifierScope property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdentifierScopeChanged;
        
        /// <summary>
        /// Gets fired before the IdentifierScope property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdentifierScopeChanging;
        
        /// <summary>
        /// Gets fired before the Identifier property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdentifierChanging;
        
        /// <summary>
        /// Gets fired when the Identifier property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdentifierChanged;
        
        private static NMF.Models.Meta.ITypedElement RetrieveRecommendedPlayerReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(Hsrm.DeepModeling.Warehouse.Products.MyWarehouse.DVD.ClassInstance)).Resolve("recommendedPlayer")));
        }
        
        /// <summary>
        /// Raises the RecommendedPlayerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRecommendedPlayerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RecommendedPlayerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RecommendedPlayerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRecommendedPlayerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RecommendedPlayerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RecommendedPlayer property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRecommendedPlayer(object sender, System.EventArgs eventArgs)
        {
            this.RecommendedPlayer = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveSalesPriceAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(Hsrm.DeepModeling.Warehouse.Warehouse.Product.ClassInstance)).Resolve("salesPrice")));
        }
        
        /// <summary>
        /// Raises the SalesPriceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSalesPriceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SalesPriceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SalesPriceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSalesPriceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SalesPriceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsAbstractAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(NMF.Models.Meta.Class.ClassInstance)).Resolve("IsAbstract")));
        }
        
        /// <summary>
        /// Raises the IsAbstractChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsAbstractChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsAbstractChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsAbstractChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsAbstractChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsAbstractChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIdentifierScopeAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(NMF.Models.Meta.Class.ClassInstance)).Resolve("IdentifierScope")));
        }
        
        /// <summary>
        /// Raises the IdentifierScopeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdentifierScopeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdentifierScopeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IdentifierScopeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdentifierScopeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdentifierScopeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIdentifierReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(NMF.Models.Meta.Class.ClassInstance)).Resolve("Identifier")));
        }
        
        /// <summary>
        /// Raises the IdentifierChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdentifierChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdentifierChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IdentifierChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdentifierChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdentifierChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Identifier property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetIdentifier(object sender, System.EventArgs eventArgs)
        {
            this.Identifier = null;
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override NMF.Models.IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "RECOMMENDEDPLAYER"))
            {
                return this.RecommendedPlayer;
            }
            if ((reference == "IDENTIFIER"))
            {
                return this.Identifier;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "SALESPRICE"))
            {
                return this.SalesPrice;
            }
            if ((attribute == "ISABSTRACT"))
            {
                return this.IsAbstract;
            }
            if ((attribute == "IDENTIFIERSCOPE"))
            {
                return this.IdentifierScope;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "RECOMMENDEDPLAYER"))
            {
                this.RecommendedPlayer = ((IDVDPlayer)(value));
                return;
            }
            if ((feature == "IDENTIFIER"))
            {
                this.Identifier = ((NMF.Models.Meta.IAttribute)(value));
                return;
            }
            if ((feature == "SALESPRICE"))
            {
                this.SalesPrice = ((double)(value));
                return;
            }
            if ((feature == "ISABSTRACT"))
            {
                this.IsAbstract = ((bool)(value));
                return;
            }
            if ((feature == "IDENTIFIERSCOPE"))
            {
                this.IdentifierScope = ((NMF.Models.Meta.IdentifierScope)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "SALESPRICE"))
            {
                return Observable.Box(new SalesPriceProxy(this));
            }
            if ((attribute == "ISABSTRACT"))
            {
                return Observable.Box(new IsAbstractProxy(this));
            }
            if ((attribute == "IDENTIFIERSCOPE"))
            {
                return Observable.Box(new IdentifierScopeProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "RECOMMENDEDPLAYER"))
            {
                return new RecommendedPlayerProxy(this);
            }
            if ((reference == "IDENTIFIER"))
            {
                return new IdentifierProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the ProductSpecification for this model element
        /// </summary>
        public virtual Hsrm.DeepModeling.Warehouse.Warehouse.IProductSpecification GetProductSpecification()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("https://example.org/#//DVD")));
            }
            return ((Hsrm.DeepModeling.Warehouse.Warehouse.IProductSpecification)(_classInstance));
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("https://example.org/#//DVD")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the DVD class
        /// </summary>
        public class DVDReferencedElementsCollection : ReferenceCollection, ICollectionExpression<NMF.Models.IModelElement>, ICollection<NMF.Models.IModelElement>
        {
            
            private DVD _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public DVDReferencedElementsCollection(DVD parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.RecommendedPlayer != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Identifier != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.RecommendedPlayerChanged += this.PropagateValueChanges;
                this._parent.IdentifierChanged += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.RecommendedPlayerChanged -= this.PropagateValueChanges;
                this._parent.IdentifierChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(NMF.Models.IModelElement item)
            {
                if ((this._parent.RecommendedPlayer == null))
                {
                    IDVDPlayer recommendedPlayerCasted = item.As<IDVDPlayer>();
                    if ((recommendedPlayerCasted != null))
                    {
                        this._parent.RecommendedPlayer = recommendedPlayerCasted;
                        return;
                    }
                }
                if ((this._parent.Identifier == null))
                {
                    IAttribute identifierCasted = item.As<IAttribute>();
                    if ((identifierCasted != null))
                    {
                        this._parent.Identifier = identifierCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.RecommendedPlayer = null;
                this._parent.Identifier = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(NMF.Models.IModelElement item)
            {
                if ((item == this._parent.RecommendedPlayer))
                {
                    return true;
                }
                if ((item == this._parent.Identifier))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(NMF.Models.IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.RecommendedPlayer != null))
                {
                    array[arrayIndex] = this._parent.RecommendedPlayer;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Identifier != null))
                {
                    array[arrayIndex] = this._parent.Identifier;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(NMF.Models.IModelElement item)
            {
                if ((this._parent.RecommendedPlayer == item))
                {
                    this._parent.RecommendedPlayer = null;
                    return true;
                }
                if ((this._parent.Identifier == item))
                {
                    this._parent.Identifier = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<NMF.Models.IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<NMF.Models.IModelElement>().Concat(this._parent.RecommendedPlayer).Concat(this._parent.Identifier).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the recommendedPlayer property
        /// </summary>
        private sealed class RecommendedPlayerProxy : ModelPropertyChange<IDVD, IDVDPlayer>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RecommendedPlayerProxy(IDVD modelElement) : 
                    base(modelElement, "recommendedPlayer")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDVDPlayer Value
            {
                get
                {
                    return this.ModelElement.RecommendedPlayer;
                }
                set
                {
                    this.ModelElement.RecommendedPlayer = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the salesPrice property
        /// </summary>
        private sealed class SalesPriceProxy : ModelPropertyChange<Hsrm.DeepModeling.Warehouse.Warehouse.IProduct, double>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SalesPriceProxy(Hsrm.DeepModeling.Warehouse.Warehouse.IProduct modelElement) : 
                    base(modelElement, "salesPrice")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override double Value
            {
                get
                {
                    return this.ModelElement.SalesPrice;
                }
                set
                {
                    this.ModelElement.SalesPrice = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IsAbstract property
        /// </summary>
        private sealed class IsAbstractProxy : ModelPropertyChange<NMF.Models.Meta.IClass, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsAbstractProxy(NMF.Models.Meta.IClass modelElement) : 
                    base(modelElement, "IsAbstract")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsAbstract;
                }
                set
                {
                    this.ModelElement.IsAbstract = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IdentifierScope property
        /// </summary>
        private sealed class IdentifierScopeProxy : ModelPropertyChange<NMF.Models.Meta.IClass, NMF.Models.Meta.IdentifierScope>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IdentifierScopeProxy(NMF.Models.Meta.IClass modelElement) : 
                    base(modelElement, "IdentifierScope")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override NMF.Models.Meta.IdentifierScope Value
            {
                get
                {
                    return this.ModelElement.IdentifierScope;
                }
                set
                {
                    this.ModelElement.IdentifierScope = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the InstanceOf property
        /// </summary>
        private sealed class InstanceOfProxy : ModelPropertyChange<NMF.Models.Meta.IClass, NMF.Models.Meta.IClass>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InstanceOfProxy(NMF.Models.Meta.IClass modelElement) : 
                    base(modelElement, "InstanceOf")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override NMF.Models.Meta.IClass Value
            {
                get
                {
                    return this.ModelElement.InstanceOf;
                }
                set
                {
                    this.ModelElement.InstanceOf = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Identifier property
        /// </summary>
        private sealed class IdentifierProxy : ModelPropertyChange<NMF.Models.Meta.IClass, NMF.Models.Meta.IAttribute>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IdentifierProxy(NMF.Models.Meta.IClass modelElement) : 
                    base(modelElement, "Identifier")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override NMF.Models.Meta.IAttribute Value
            {
                get
                {
                    return this.ModelElement.Identifier;
                }
                set
                {
                    this.ModelElement.Identifier = value;
                }
            }
        }
    }
}
